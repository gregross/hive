/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is HIVE .
 *
 * The Initial Developer of the Original Code is
 * Greg Ross.
 * Portions created by the Initial Developer are Copyright (C) 2000-2004
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s): Greg Ross <gr@dcs.gla.ac.uk>
 		   Matthew Chalmers <matthew@dcs.gla.ac.uk>
 *                 Alistair Morrison <morrisaj@dcs.gla.ac.uk>
 *		   Andrew Didsbury
 *           		
 *	
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */
/**
 * Algorithmic testbed
 *
 * DataSource
 *
 * Class represents an instance of a visual module for importing data into the system
 *
 *  @author Greg Ross
 */
 package alg;

import parent_gui.dataVolumeThresholding.HybridGenerator;
import alg.fileloader.*;
import data.*;
import parent_gui.*;
import java.awt.Color;
import java.util.ArrayList;
import javax.swing.*;
import java.awt.BorderLayout;
import javax.swing.BorderFactory;
import java.awt.event.*;

public class DataSource extends DefaultVisualModule implements ItemListener
{
	// Versioning for serialisation
	
	static final long serialVersionUID = 50L;
	
	// The parent MDI form
	
	private static Mdi mdiForm;
	
	// The parent drawing surface
	
	private DrawingCanvas drawPane;
	
	// The dimensions of the module
	
	private int height = 140;
	private int width = 116;
	
	// Store CSV data
	
	private DataItemCollection csvData;
	
	// Label for displaying the name of the data file
	
	private JLabel lblFileName;
	private JLabel lblN;
	private JLabel lblD;
	
	JButton loadData;
	
	private JPanel labelPane;
	private JLabel lblBinary = null;
	
	// Checkbox for determining whether the data are normalised to the [0, 1] interval
	
	JCheckBox chkNormalise = null;
	
	public DataSource(Mdi mdiForm, DrawingCanvas drawPane)
	{
		super(mdiForm, drawPane);
		
		setName("Data");
		setToolTipText("Database");
		setLabelCaption(getName());
		
		this.mdiForm = mdiForm;
		this.drawPane = drawPane;
		setPorts();
		
		setMode(DefaultVisualModule.ALGORITHM_MODE);
		
		// Set the background colour and dimensions
		
		setBackground(Color.orange);
		setDimension(width, height);
		
		// Create the interface controls
		
		addControls();
		
		// *******************************************************************
		// This next line sets the data source as a source anchor so that when it
		// is imported as part of a hybrid algorithm generated by HIVE, it can be
		// identified and swapped by the user's source trigger module
		//
		// This is only a temporary measure here because essentially the anchors
		// will only be identified and set when the hybrid algorithm is configured
		// and added to the 'cookbook' of algorithms that can be generated.
		
		setAnchorType(HybridGenerator.ANCHOR_SOURCE);
		
		// *******************************************************************
	}
	
	private void addControls()
	{
		// Add a JPanel to the CENTER region of the module
		// Add a button for loading data to this panel
		
		JPanel centrePane = new JPanel();
		loadData = new JButton("Load data");
		
		loadData.addActionListener(new ActionListener() 
		{
            		public void actionPerformed(ActionEvent e) 
			{
				DataFileLoaderFrame.getInstance(DataSource.this);
            		}
        	});
		
		centrePane.add(loadData);
		centrePane.setOpaque(false);
		add(centrePane, "Center");
		
		// Add a label indicating the name of the data file
		
		labelPane = new JPanel();
		labelPane.setLayout(new BoxLayout(labelPane, BoxLayout.Y_AXIS));
		labelPane.setOpaque(false);
		
		lblFileName = new JLabel("File: ");
		labelPane.add(lblFileName);
		
		centrePane.add(labelPane);
		
		// Display N and D
		
		lblN = new JLabel("N = ", JLabel.CENTER);
		lblD = new JLabel("D = ", JLabel.CENTER);
		
		labelPane.add(lblN);
		labelPane.add(lblD);
		
		// Make the controls visible depending upon the context
		// of the VisualModule
		
		setInterfaceVisibility();
	}
	
	public void setFileName(String fileName)
	{
		// Display the name of the data file
		// This is called from DataFileLoaderFrame.handleFile()
		
		int lastOBlique = 0;
		lastOBlique = fileName.lastIndexOf("\\");
		
		if (lastOBlique > 0)
		{
			String file = fileName.substring(lastOBlique+1, fileName.length());
			lblFileName.setText("File: " + file);
		}
	}
	
	public void setCSVData(DataItemCollection csvData)
	{
		// Get the CSV data
		
		this.csvData = csvData;
		
		// Display the statistics
		
		lblN.setText("N = " + (new Integer(csvData.getSize()).toString()));
		lblD.setText("D = " + (new Integer(csvData.getFields().size()).toString()));
		
		// Send this data to the output port
		
		ArrayList transferData = new ArrayList();
		transferData.add(csvData);
		
		// If the data are binary, then indicate this, also
		// if the data are not binary and consist of all doubles
		// or integers, then the user should be able to normalise them
		
		setDataInfo();
		
		if (chkNormalise != null)
			if (chkNormalise.isSelected())
				csvData.setNormalised(true);
		
		getOutPort(0).sendData(transferData);
	}
	
	private void setDataInfo()
	{
		// If the data are binary then indicate this
		
		boolean doublesOrInts = csvData.allDoublesOrIntegers();
		
		if (csvData.getBinary())
		{
			if (chkNormalise != null)
			{
				labelPane.remove(chkNormalise);
				chkNormalise = null;
			}
			
			if (lblBinary == null)
			{
				lblBinary = new JLabel("Binary data");
				labelPane.add(lblBinary);
			}
		}
		else if (doublesOrInts)
		{
			// If the data consist of all douebles or integers then allow for it to be
			// normalised in the interval [1, 0]
			
			if (lblBinary != null)
			{
				labelPane.remove(lblBinary);
				lblBinary = null;
			}
			
			if (csvData.allDoublesOrIntegers() && (chkNormalise == null))
			{
				chkNormalise = new JCheckBox("normalise [0, 1]", false);
				chkNormalise.addItemListener(this);
				labelPane.add(chkNormalise);
			}
		}
		else
		{
			if (lblBinary != null)
			{
				labelPane.remove(lblBinary);
				lblBinary = null;
			}
			if (chkNormalise != null)
			{
				labelPane.remove(chkNormalise);
				chkNormalise = null;
			}
		}
	}
	
	public DataItemCollection getCSVData()
	{
		return	csvData;
	}
	
	/**
	* Create the ports and append them to the module
	*/
	
	private void setPorts()
	{
		ArrayList ports = new ArrayList(1);
		ModulePort port = new ModulePort(this, ScriptModel.OUTPUT_PORT, 0);
		port.setPortLabel("Data out");
		port.setPortDataStructure(ScriptModel.DATA_ITEM_COLLECTION);
		ports.add(port);
		addPorts(ports);
	}
	
	/**
	* Method to restore action listener for the JButton
	*/
	
	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, 
								java.lang.ClassNotFoundException
								
	{
		in.defaultReadObject();
		
		loadData.addActionListener(new ActionListener() 
		{
            		public void actionPerformed(ActionEvent e) 
			{
				DataFileLoaderFrame.getInstance(DataSource.this);
            		}
        	});
	}
	
	/**
	* Implementation of the ItemListener interface
	*/
	
	public void itemStateChanged(ItemEvent e)
	{
		if (e.getSource() == chkNormalise)
		{
			if (e.getStateChange() == ItemEvent.SELECTED)
			{
				if (csvData != null)
					csvData.setNormalised(true);
			}
			else
			{
				if (csvData != null)
					csvData.setNormalised(false);
			}
			
			// Send the modified data to the output
			
			ArrayList transferData = new ArrayList();
			transferData.add(csvData);
			getOutPort(0).sendData(transferData);
		}
	}
}
